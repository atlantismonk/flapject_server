{"version":3,"sources":["../../utils/log_util.js"],"names":["configure","Logger","errorLogger","getLogger","resLogger","error","ctx","resTime","formatError","response","info","formatRes","logText","String","formatReq","request","status","JSON","stringify","body","err","name","message","stack","req","method","originalUrl","ip","query"],"mappings":";;;;;;;AAIA;;;;AAEA;;;;;;AAEA;AARA;;;;AASA,iBAAOA,SAAP;;AAEA,IAAMC,SAAS,EAAf;;AAEA,IAAMC,cAAc,iBAAOC,SAAP,CAAiB,aAAjB,CAApB;AACA,IAAMC,YAAY,iBAAOD,SAAP,CAAiB,WAAjB,CAAlB;;AAEA;AACAF,OAAOI,KAAP,GAAe,UAAUC,GAAV,EAAeD,KAAf,EAAsBE,OAAtB,EAA+B;AAC1C,QAAID,OAAOD,KAAX,EAAkB;AACdH,oBAAYG,KAAZ,CAAkBG,YAAYF,GAAZ,EAAiBD,KAAjB,EAAwBE,OAAxB,CAAlB;AACH;AACJ,CAJD;;AAMA;AACAN,OAAOQ,QAAP,GAAkB,UAAUH,GAAV,EAAeC,OAAf,EAAwB;AACtC,QAAID,GAAJ,EAAS;AACLF,kBAAUM,IAAV,CAAeC,UAAUL,GAAV,EAAeC,OAAf,CAAf;AACH;AACJ,CAJD;;AAMA;AACA,SAASI,SAAT,CAAmBL,GAAnB,EAAwBC,OAAxB,EAAiC;AAC7B,QAAIK,UAAU,IAAIC,MAAJ,EAAd;;AAEA;AACAD,eAAW,OAAO,oDAAP,GAA8D,IAAzE;;AAEA;AACAA,eAAWE,UAAUR,IAAIS,OAAd,EAAuBR,OAAvB,CAAX;;AAEA;AACAK,eAAW,sBAAsBN,IAAIU,MAA1B,GAAmC,IAA9C;;AAEA;AACAJ,eAAW,oBAAoB,IAApB,GAA2BK,KAAKC,SAAL,CAAeZ,IAAIa,IAAnB,CAA3B,GAAsD,IAAjE;;AAEA;AACAP,eAAW,qDAAqD,IAAhE;;AAEA,WAAOA,OAAP;AAEH;;AAED;AACA,SAASJ,WAAT,CAAqBF,GAArB,EAA0Bc,GAA1B,EAA+Bb,OAA/B,EAAwC;AACpC,QAAIK,UAAU,IAAIC,MAAJ,EAAd;;AAEA;AACAD,eAAW,OAAO,iDAAP,GAA2D,IAAtE;;AAEA;AACAA,eAAWE,UAAUR,IAAIS,OAAd,EAAuBR,OAAvB,CAAX;;AAEA;AACAK,eAAW,eAAeQ,IAAIC,IAAnB,GAA0B,IAArC;AACA;AACAT,eAAW,kBAAkBQ,IAAIE,OAAtB,GAAgC,IAA3C;AACA;AACAV,eAAW,gBAAgBQ,IAAIG,KAApB,GAA4B,IAAvC;;AAEA;AACAX,eAAW,kDAAkD,IAA7D;;AAEA,WAAOA,OAAP;AACH;;AAED;AACA,SAASE,SAAT,CAAoBU,GAApB,EAAyBjB,OAAzB,EAAkC;;AAE9B,QAAIK,UAAU,IAAIC,MAAJ,EAAd;;AAEA,QAAMY,SAASD,IAAIC,MAAnB;AACA;AACAb,eAAW,qBAAqBa,MAArB,GAA8B,IAAzC;;AAEA;AACAb,eAAW,2BAA2BY,IAAIE,WAA/B,GAA6C,IAAxD;;AAEA;AACAd,eAAW,yBAAyBY,IAAIG,EAA7B,GAAkC,IAA7C;;AAEA;AACA,QAAIF,WAAW,KAAf,EAAsB;AAClBb,mBAAW,qBAAqBK,KAAKC,SAAL,CAAeM,IAAII,KAAnB,CAArB,GAAiD,IAA5D;AACA;AACH,KAHD,MAGO;AACHhB,mBAAW,mBAAmB,IAAnB,GAA0BK,KAAKC,SAAL,CAAeM,IAAIL,IAAnB,CAA1B,GAAqD,IAAhE;AACA;AACH;AACD;AACAP,eAAW,oBAAoBL,OAApB,GAA8B,IAAzC;;AAEA,WAAOK,OAAP;AACH;;QAEOX,M,GAAAA,M","file":"log_util.js","sourcesContent":["/**\r\n * Created by Atlantismonk on 2017/2/25.\r\n */\r\n\r\nimport log4js from 'log4js';\r\n\r\nimport log_config from '../config/log.config';\r\n\r\n//加载配置文件\r\nlog4js.configure(log_config);\r\n\r\nconst Logger = {};\r\n\r\nconst errorLogger = log4js.getLogger('errorLogger');\r\nconst resLogger = log4js.getLogger('resLogger');\r\n\r\n//封装错误日志\r\nLogger.error = function (ctx, error, resTime) {\r\n    if (ctx && error) {\r\n        errorLogger.error(formatError(ctx, error, resTime));\r\n    }\r\n};\r\n\r\n//封装响应日志\r\nLogger.response = function (ctx, resTime) {\r\n    if (ctx) {\r\n        resLogger.info(formatRes(ctx, resTime));\r\n    }\r\n};\r\n\r\n//格式化响应日志\r\nfunction formatRes(ctx, resTime) {\r\n    let logText = new String();\r\n\r\n    //响应日志开始\r\n    logText += \"\\n\" + \"*************** response log start ***************\" + \"\\n\";\r\n\r\n    //添加请求日志\r\n    logText += formatReq(ctx.request, resTime);\r\n\r\n    //响应状态码\r\n    logText += \"response status: \" + ctx.status + \"\\n\";\r\n\r\n    //响应内容\r\n    logText += \"response body: \" + \"\\n\" + JSON.stringify(ctx.body) + \"\\n\";\r\n\r\n    //响应日志结束\r\n    logText += \"*************** response log end ***************\" + \"\\n\";\r\n\r\n    return logText;\r\n\r\n}\r\n\r\n//格式化错误日志\r\nfunction formatError(ctx, err, resTime) {\r\n    let logText = new String();\r\n\r\n    //错误信息开始\r\n    logText += \"\\n\" + \"*************** error log start ***************\" + \"\\n\";\r\n\r\n    //添加请求日志\r\n    logText += formatReq(ctx.request, resTime);\r\n\r\n    //错误名称\r\n    logText += \"err name: \" + err.name + \"\\n\";\r\n    //错误信息\r\n    logText += \"err message: \" + err.message + \"\\n\";\r\n    //错误详情\r\n    logText += \"err stack: \" + err.stack + \"\\n\";\r\n\r\n    //错误信息结束\r\n    logText += \"*************** error log end ***************\" + \"\\n\";\r\n\r\n    return logText;\r\n}\r\n\r\n//格式化请求日志\r\nfunction formatReq (req, resTime) {\r\n\r\n    let logText = new String();\r\n\r\n    const method = req.method;\r\n    //访问方法\r\n    logText += \"request method: \" + method + \"\\n\";\r\n\r\n    //请求原始地址\r\n    logText += \"request originalUrl:  \" + req.originalUrl + \"\\n\";\r\n\r\n    //客户端ip\r\n    logText += \"request client ip:  \" + req.ip + \"\\n\";\r\n\r\n    //请求参数\r\n    if (method === 'GET') {\r\n        logText += \"request query:  \" + JSON.stringify(req.query) + \"\\n\";\r\n        // startTime = req.query.requestStartTime;\r\n    } else {\r\n        logText += \"request body: \" + \"\\n\" + JSON.stringify(req.body) + \"\\n\";\r\n        // startTime = req.body.requestStartTime;\r\n    }\r\n    //服务器响应时间\r\n    logText += \"response time: \" + resTime + \"\\n\";\r\n\r\n    return logText;\r\n}\r\n\r\nexport {Logger};"]}