{"version":3,"sources":["../../bin/www"],"names":["debug","isDebug","process","env","NODE_ENV","isDev","isTest","isProduction","global","_args","console","log","baseLogPath","i","len","appenders","length","path","port","normalizePort","server","createServer","callback","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","exit","addr","address"],"mappings":";;AACA;;;;AACA;;;;AAMA;;;;AAQA;;;;AACA;;AAuBA;;;;AAQA;;;;;;AA7CA,IAAMA,QAAQ,oBAAU,aAAV,CAAd;;AAEA;;;;AAIA,kBAAMC,OAAN,GAAgBC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,OAAzC;AACA,kBAAMC,KAAN,GAAe,CAACH,QAAQC,GAAR,CAAYC,QAAb,GAAuB,aAAvB,GAAsCF,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA9E;AACA,kBAAME,MAAN,GAAeJ,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAAxC;AACA,kBAAMG,YAAN,GAAqBL,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA9C;AACAI,OAAOC,KAAP,qB,CAAqB;AACrBC,QAAQC,GAAR,CAAY,0BAA0BT,QAAQC,GAAR,CAAYC,QAAlD;;AAOA;;;AAGA,CAAC,YAAU;AACP;AACA,QAAG,cAAUQ,WAAb,EAAyB;AACrB,gCAAY,cAAUA,WAAtB;AACA;AACA,aAAI,IAAIC,IAAI,CAAR,EAAWC,MAAM,cAAUC,SAAV,CAAoBC,MAAzC,EAAiDH,IAAIC,GAArD,EAA0DD,GAA1D,EAA8D;AAC1D,gBAAG,cAAUE,SAAV,CAAoBF,CAApB,EAAuBI,IAA1B,EAA+B;AAC3B,wCAAY,cAAUL,WAAV,GAAwB,cAAUG,SAAV,CAAoBF,CAApB,EAAuBI,IAA3D;AACH;AACJ;AACJ;AACJ,CAXD;;AAeA;;AAEA;;AAIA;;;;AAIA;AACA;AACA,IAAIC,OAAOC,cAAc,kBAAMD,IAAN,IAAc,MAA5B,CAAX;AACAR,QAAQC,GAAR,CAAY,YAAYO,IAAxB;;AAEA;;;;AAIA,IAAIE,SAAS,eAAKC,YAAL,CAAkB,cAAIC,QAAJ,EAAlB,CAAb;;AAEA;;;;AAIAF,OAAOG,MAAP,CAAcL,IAAd;AACAE,OAAOI,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAL,OAAOI,EAAP,CAAU,WAAV,EAAuBE,WAAvB;;AAEA;;;;AAIA,SAASP,aAAT,CAAuBQ,GAAvB,EAA4B;AACxB,QAAIT,OAAOU,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,QAAIE,MAAMX,IAAN,CAAJ,EAAiB;AACb;AACA,eAAOS,GAAP;AACH;;AAED,QAAIT,QAAQ,CAAZ,EAAe;AACX;AACA,eAAOA,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED;;;;AAIA,SAASO,OAAT,CAAiBK,KAAjB,EAAwB;AACpB,QAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC5B,cAAMD,KAAN;AACH;;AAED,QAAIE,OAAO,OAAOd,IAAP,KAAgB,QAAhB,GACL,UAAUA,IADL,GAEL,UAAUA,IAFhB;;AAIA;AACA,YAAQY,MAAMG,IAAd;AACI,aAAK,QAAL;AACIvB,oBAAQoB,KAAR,CAAcE,OAAO,+BAArB;AACA9B,oBAAQgC,IAAR,CAAa,CAAb;AACA;AACJ,aAAK,YAAL;AACIxB,oBAAQoB,KAAR,CAAcE,OAAO,oBAArB;AACA9B,oBAAQgC,IAAR,CAAa,CAAb;AACA;AACJ;AACI,kBAAMJ,KAAN;AAVR;AAYH;;AAED;;;;AAIA,SAASJ,WAAT,GAAuB;AACnB,QAAIS,OAAOf,OAAOgB,OAAP,EAAX;AACA,QAAIJ,OAAO,OAAOG,IAAP,KAAgB,QAAhB,GACL,UAAUA,IADL,GAEL,UAAUA,KAAKjB,IAFrB;AAGAlB,UAAM,kBAAkBgC,IAAxB;AACH","file":"www.js","sourcesContent":["\r\nimport http from 'http';\r\nimport Debug from 'debug';\r\nconst debug = new Debug('demo:server');\r\n\r\n/**\r\n * Created by Atlantismonk on 2017/2/25.\r\n */\r\nimport _args from '../configs'\r\n_args.isDebug = process.env.NODE_ENV === 'debug';\r\n_args.isDev = (!process.env.NODE_ENV? 'development':(process.env.NODE_ENV === 'development'));\r\n_args.isTest = process.env.NODE_ENV === 'test';\r\n_args.isProduction = process.env.NODE_ENV === 'production';\r\nglobal._args = _args;//导入全局变量\r\nconsole.log('process.env.NODE_ENV=' + process.env.NODE_ENV);\r\n\r\nimport logConfig from '../configs/log.config';\r\nimport {confirmPath} from '../utils';\r\n\r\n\r\n\r\n/**\r\n * 初始化log相关目录\r\n */\r\n(function(){\r\n    //创建log的根目录'logs'\r\n    if(logConfig.baseLogPath){\r\n        confirmPath(logConfig.baseLogPath)\r\n        //根据不同的logType创建不同的文件目录\r\n        for(let i = 0, len = logConfig.appenders.length; i < len; i++){\r\n            if(logConfig.appenders[i].path){\r\n                confirmPath(logConfig.baseLogPath + logConfig.appenders[i].path);\r\n            }\r\n        }\r\n    }\r\n})();\r\n\r\n\r\n\r\n//运行连接mongo代码\r\nimport mongo from './mongo';\r\nmongo();\r\n\r\n\r\n\r\n/**\r\n * 项目入口\r\n */\r\nimport app from '../app';\r\n// 打印输出端口号\r\n// 将端口号设置为配置文件的端口号，默认值为3000\r\nvar port = normalizePort(_args.port || '3000');\r\nconsole.log('port = ' + port);\r\n\r\n/**\r\n * Create HTTP server.\r\n */\r\n\r\nvar server = http.createServer(app.callback());\r\n\r\n/**\r\n * Listen on provided port, on all network interfaces.\r\n */\r\n\r\nserver.listen(port);\r\nserver.on('error', onError);\r\nserver.on('listening', onListening);\r\n\r\n/**\r\n * Normalize a port into a number, string, or false.\r\n */\r\n\r\nfunction normalizePort(val) {\r\n    var port = parseInt(val, 10);\r\n\r\n    if (isNaN(port)) {\r\n        // named pipe\r\n        return val;\r\n    }\r\n\r\n    if (port >= 0) {\r\n        // port number\r\n        return port;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"error\" event.\r\n */\r\n\r\nfunction onError(error) {\r\n    if (error.syscall !== 'listen') {\r\n        throw error;\r\n    }\r\n\r\n    var bind = typeof port === 'string'\r\n        ? 'Pipe ' + port\r\n        : 'Port ' + port;\r\n\r\n    // handle specific listen errors with friendly messages\r\n    switch (error.code) {\r\n        case 'EACCES':\r\n            console.error(bind + ' requires elevated privileges');\r\n            process.exit(1);\r\n            break;\r\n        case 'EADDRINUSE':\r\n            console.error(bind + ' is already in use');\r\n            process.exit(1);\r\n            break;\r\n        default:\r\n            throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"listening\" event.\r\n */\r\n\r\nfunction onListening() {\r\n    var addr = server.address();\r\n    var bind = typeof addr === 'string'\r\n        ? 'pipe ' + addr\r\n        : 'port ' + addr.port;\r\n    debug('Listening on ' + bind);\r\n}"]}